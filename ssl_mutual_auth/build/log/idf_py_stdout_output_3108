[1/11] Performing build step for 'bootloader'
[1/1] cmd.exe /C "cd /D C:\Users\kien\Downloads\esp32\ssl_mutual_auth\build\bootloader\esp-idf\esptool_py && C:\Espressif\python_env\idf5.0_py3.8_env\Scripts\python.exe C:/Espressif/frameworks/esp-idf-v5.0/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 C:/Users/kien/Downloads/esp32/ssl_mutual_auth/build/bootloader/bootloader.bin"
Bootloader binary size 0x6710 bytes. 0x8f0 bytes (8%) free.
[2/9] Building C object esp-idf/oled/CMakeFiles/__idf_oled.dir/i2c_oled.c.obj
In file included from C:/Users/kien/Downloads/esp32/ssl_mutual_auth/common/oled/i2c_oled.c:4:
C:/Users/kien/Downloads/esp32/ssl_mutual_auth/common/oled/font8x8_basic.h:41:16: warning: 'font8x8_basic_tr' defined but not used [-Wunused-variable]
   41 | static uint8_t font8x8_basic_tr[128][8] = {
      |                ^~~~~~~~~~~~~~~~
[3/9] Building C object esp-idf/sensor/CMakeFiles/__idf_sensor.dir/sensor.c.obj
[4/9] Linking C static library esp-idf\oled\liboled.a
[5/9] Linking C static library esp-idf\sensor\libsensor.a
[6/9] Generating ld/sections.ld
[7/9] Linking CXX executable mqtt_ssl_mutual_auth.elf
[8/9] Generating binary image from built executable
esptool.py v4.4
Creating esp32 image...
Merged 25 ELF sections
Successfully created esp32 image.
Generated C:/Users/kien/Downloads/esp32/ssl_mutual_auth/build/mqtt_ssl_mutual_auth.bin
[9/9] cmd.exe /C "cd /D C:\Users\kien\Downloads\esp32\ssl_mutual_auth\build\esp-idf\esptool_py && C:\Espressif\python_env\idf5.0_py3.8_env\Scripts\python.exe C:/Espressif/frameworks/esp-idf-v5.0/components/partition_table/check_sizes.py --offset 0x8000 partition --type app C:/Users/kien/Downloads/esp32/ssl_mutual_auth/build/partition_table/partition-table.bin C:/Users/kien/Downloads/esp32/ssl_mutual_auth/build/mqtt_ssl_mutual_auth.bin"
mqtt_ssl_mutual_auth.bin binary size 0xefde0 bytes. Smallest app partition is 0x160000 bytes. 0x70220 bytes (32%) free.
